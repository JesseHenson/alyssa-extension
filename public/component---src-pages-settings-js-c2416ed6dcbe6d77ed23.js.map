{"version":3,"file":"component---src-pages-settings-js-c2416ed6dcbe6d77ed23.js","mappings":"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","sources":["webpack://cosmic-tab-coach-landing/./src/pages/settings.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\nimport Layout from '../components/Layout'\n\nconst Container = styled.div`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n  padding: 2rem;\n  position: relative;\n  overflow: hidden;\n`\n\nconst BackButton = styled(Link)`\n  position: fixed;\n  top: 2rem;\n  left: 2rem;\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  color: white;\n  padding: 0.8rem 1.5rem;\n  border-radius: 25px;\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n  z-index: 1000;\n  font-size: 0.9rem;\n  text-decoration: none;\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.2);\n    transform: translateY(-2px);\n  }\n`\n\nconst SettingsPanel = styled.div`\n  max-width: 800px;\n  margin: 4rem auto 2rem;\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 20px;\n  padding: 2rem;\n  backdrop-filter: blur(20px);\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);\n`\n\nconst Header = styled.div`\n  text-align: center;\n  margin-bottom: 2rem;\n`\n\nconst Title = styled.h1`\n  font-family: 'Poppins', sans-serif;\n  font-size: 2rem;\n  color: #333;\n  margin-bottom: 0.5rem;\n`\n\nconst Subtitle = styled.p`\n  color: #666;\n  font-size: 1rem;\n`\n\nconst Section = styled.div`\n  margin-bottom: 2rem;\n  padding-bottom: 2rem;\n  border-bottom: 1px solid #f0f0f0;\n\n  &:last-child {\n    border-bottom: none;\n    margin-bottom: 0;\n  }\n`\n\nconst SectionTitle = styled.h3`\n  font-family: 'Poppins', sans-serif;\n  color: #333;\n  margin-bottom: 1rem;\n  font-size: 1.2rem;\n`\n\nconst SettingRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding: 1rem;\n  background: #f8f9fa;\n  border-radius: 12px;\n`\n\nconst SettingLabel = styled.div`\n  flex: 1;\n`\n\nconst SettingName = styled.div`\n  font-weight: 500;\n  color: #333;\n  margin-bottom: 0.2rem;\n`\n\nconst SettingDesc = styled.div`\n  font-size: 0.9rem;\n  color: #666;\n`\n\nconst SettingControl = styled.div`\n  margin-left: 1rem;\n`\n\nconst Select = styled.select`\n  padding: 0.5rem 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background: white;\n  font-size: 0.9rem;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n    border-color: #667eea;\n  }\n`\n\nconst Toggle = styled.div`\n  position: relative;\n  width: 50px;\n  height: 24px;\n  background: ${props => props.checked ? '#667eea' : '#ddd'};\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: ${props => props.checked ? '26px' : '2px'};\n    width: 20px;\n    height: 20px;\n    background: white;\n    border-radius: 50%;\n    transition: all 0.3s ease;\n  }\n`\n\nconst Slider = styled.input`\n  width: 100%;\n  height: 6px;\n  border-radius: 3px;\n  background: #ddd;\n  outline: none;\n  -webkit-appearance: none;\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #667eea;\n    cursor: pointer;\n  }\n\n  &::-moz-range-thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #667eea;\n    cursor: pointer;\n    border: none;\n  }\n`\n\nconst ThemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1rem;\n  margin-top: 1rem;\n`\n\nconst ThemeOption = styled.div`\n  aspect-ratio: 16/9;\n  border-radius: 8px;\n  cursor: pointer;\n  position: relative;\n  border: 3px solid ${props => props.selected ? '#667eea' : 'transparent'};\n  transition: all 0.3s ease;\n\n  &.cosmic {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  }\n\n  &.nature {\n    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);\n  }\n\n  &.minimal {\n    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n  }\n\n  &.premium1 {\n    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);\n    opacity: 0.6;\n  }\n\n  &.premium2 {\n    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);\n    opacity: 0.6;\n  }\n\n  &::after {\n    content: '${props => props.premium ? '⭐ Premium' : ''}';\n    position: absolute;\n    bottom: 0.2rem;\n    left: 0.2rem;\n    right: 0.2rem;\n    background: rgba(0, 0, 0, 0.7);\n    color: white;\n    font-size: 0.7rem;\n    padding: 0.2rem 0.4rem;\n    border-radius: 4px;\n    text-align: center;\n    opacity: ${props => props.premium ? 1 : 0};\n  }\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n  }\n`\n\nconst ThemeName = styled.div`\n  text-align: center;\n  margin-top: 0.5rem;\n  font-size: 0.8rem;\n  color: #666;\n`\n\nconst PremiumBanner = styled.div`\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  padding: 1rem;\n  border-radius: 12px;\n  text-align: center;\n  margin-top: 1rem;\n`\n\nconst UpgradeButton = styled(Link)`\n  display: inline-block;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  padding: 0.8rem 1.5rem;\n  border-radius: 25px;\n  text-decoration: none;\n  margin-top: 1rem;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.3);\n    transform: translateY(-2px);\n  }\n`\n\nconst SettingsPage = () => {\n  const [settings, setSettings] = useState({\n    theme: 'cosmic',\n    frequency: '30',\n    textSize: '16',\n    personalizedContent: true,\n    animations: true,\n    notifications: false,\n    autoRefresh: true\n  })\n\n  const updateSetting = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }))\n  }\n\n  return (\n    <Layout \n      title=\"Settings - Cosmic Tab Coach\"\n      description=\"Customize your cosmic affirmation experience with themes, frequency, and personalization options\"\n    >\n      <Container>\n        <BackButton to=\"/cosmic-tab\">← Back to New Tab</BackButton>\n        \n        <SettingsPanel>\n          <Header>\n            <Title>⚙️ Settings</Title>\n            <Subtitle>Customize your cosmic affirmation experience</Subtitle>\n          </Header>\n\n          <Section>\n            <SectionTitle>🎨 Appearance</SectionTitle>\n            \n            <SettingRow>\n              <SettingLabel>\n                <SettingName>Theme</SettingName>\n                <SettingDesc>Choose your preferred cosmic theme</SettingDesc>\n              </SettingLabel>\n              <SettingControl>\n                <Select \n                  value={settings.theme} \n                  onChange={(e) => updateSetting('theme', e.target.value)}\n                >\n                  <option value=\"cosmic\">Cosmic Calm</option>\n                  <option value=\"nature\">Nature Serenity</option>\n                  <option value=\"minimal\">Minimal Focus</option>\n                </Select>\n              </SettingControl>\n            </SettingRow>\n\n            <ThemeGrid>\n              <div>\n                <ThemeOption \n                  className=\"cosmic\" \n                  selected={settings.theme === 'cosmic'}\n                  onClick={() => updateSetting('theme', 'cosmic')}\n                />\n                <ThemeName>Cosmic Calm</ThemeName>\n              </div>\n              <div>\n                <ThemeOption \n                  className=\"nature\" \n                  selected={settings.theme === 'nature'}\n                  onClick={() => updateSetting('theme', 'nature')}\n                />\n                <ThemeName>Nature Serenity</ThemeName>\n              </div>\n              <div>\n                <ThemeOption \n                  className=\"minimal\" \n                  selected={settings.theme === 'minimal'}\n                  onClick={() => updateSetting('theme', 'minimal')}\n                />\n                <ThemeName>Minimal Focus</ThemeName>\n              </div>\n              <div>\n                <ThemeOption \n                  className=\"premium1\" \n                  premium\n                  onClick={() => {}}\n                />\n                <ThemeName>Sunset Bliss ⭐</ThemeName>\n              </div>\n              <div>\n                <ThemeOption \n                  className=\"premium2\" \n                  premium\n                  onClick={() => {}}\n                />\n                <ThemeName>Cotton Candy ⭐</ThemeName>\n              </div>\n            </ThemeGrid>\n\n            <SettingRow>\n              <SettingLabel>\n                <SettingName>Text Size</SettingName>\n                <SettingDesc>Adjust affirmation text size: {settings.textSize}px</SettingDesc>\n              </SettingLabel>\n              <SettingControl>\n                <Slider\n                  type=\"range\"\n                  min=\"12\"\n                  max=\"24\"\n                  value={settings.textSize}\n                  onChange={(e) => updateSetting('textSize', e.target.value)}\n                />\n              </SettingControl>\n            </SettingRow>\n\n            <SettingRow>\n              <SettingLabel>\n                <SettingName>Animations</SettingName>\n                <SettingDesc>Enable cosmic animations and transitions</SettingDesc>\n              </SettingLabel>\n              <SettingControl>\n                <Toggle \n                  checked={settings.animations}\n                  onClick={() => updateSetting('animations', !settings.animations)}\n                />\n              </SettingControl>\n            </SettingRow>\n          </Section>\n\n          <Section>\n            <SectionTitle>✨ Content</SectionTitle>\n            \n            <SettingRow>\n              <SettingLabel>\n                <SettingName>Affirmation Frequency</SettingName>\n                <SettingDesc>How often to show new affirmations</SettingDesc>\n              </SettingLabel>\n              <SettingControl>\n                <Select \n                  value={settings.frequency} \n                  onChange={(e) => updateSetting('frequency', e.target.value)}\n                >\n                  <option value=\"15\">Every 15 seconds</option>\n                  <option value=\"30\">Every 30 seconds</option>\n                  <option value=\"60\">Every minute</option>\n                  <option value=\"300\">Every 5 minutes</option>\n                  <option value=\"0\">Manual only</option>\n                </Select>\n              </SettingControl>\n            </SettingRow>\n\n            <SettingRow>\n              <SettingLabel>\n                <SettingName>Personalized Content</SettingName>\n                <SettingDesc>AI learns your preferences for better affirmations</SettingDesc>\n              </SettingLabel>\n              <SettingControl>\n                <Toggle \n                  checked={settings.personalizedContent}\n                  onClick={() => updateSetting('personalizedContent', !settings.personalizedContent)}\n                />\n              </SettingControl>\n            </SettingRow>\n\n            <SettingRow>\n              <SettingLabel>\n                <SettingName>Auto-refresh</SettingName>\n                <SettingDesc>Automatically show new affirmation on tab focus</SettingDesc>\n              </SettingLabel>\n              <SettingControl>\n                <Toggle \n                  checked={settings.autoRefresh}\n                  onClick={() => updateSetting('autoRefresh', !settings.autoRefresh)}\n                />\n              </SettingControl>\n            </SettingRow>\n          </Section>\n\n          <Section>\n            <SectionTitle>🔔 Notifications</SectionTitle>\n            \n            <SettingRow>\n              <SettingLabel>\n                <SettingName>Daily Reminders</SettingName>\n                <SettingDesc>Get gentle reminders for mindfulness breaks</SettingDesc>\n              </SettingLabel>\n              <SettingControl>\n                <Toggle \n                  checked={settings.notifications}\n                  onClick={() => updateSetting('notifications', !settings.notifications)}\n                />\n              </SettingControl>\n            </SettingRow>\n          </Section>\n\n          <PremiumBanner>\n            <h3>✨ Unlock Premium Features</h3>\n            <p>Get personalized AI content, exclusive themes, and advanced customization</p>\n            <UpgradeButton to=\"/upgrade\">Upgrade to Premium</UpgradeButton>\n          </PremiumBanner>\n        </SettingsPanel>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default SettingsPage"],"names":["Container","styled","div","withConfig","displayName","componentId","BackButton","Link","SettingsPanel","Header","Title","h1","Subtitle","p","Section","SectionTitle","h3","SettingRow","SettingLabel","SettingName","SettingDesc","SettingControl","Select","select","Toggle","props","checked","Slider","input","ThemeGrid","ThemeOption","selected","premium","ThemeName","PremiumBanner","UpgradeButton","SettingsPage","settings","setSettings","useState","theme","frequency","textSize","personalizedContent","animations","notifications","autoRefresh","updateSetting","key","value","prev","React","Layout","title","description","to","onChange","e","target","className","onClick","type","min","max"],"sourceRoot":""}